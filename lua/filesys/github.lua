--[[--------------------------- resolution v0.1.0 ------------------------------

resolution is a Neovim config for writing TeX and doing computational math.

The Git and GitHub operations built into resolution.

Copyright (C) 2023 Roshan Truax

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) at any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

------------------------------------------------------------------------------]]

local git = {}

--------------------------------- dependencies ---------------------------------

local prefs = require('config.preferences')
local cfg_filesys = require('config.advanced.filesys')
local utilities = require('filesys.utilities')
local core_utils = require('core.utilities')
local exec_in_dir = core_utils.exec_in_dir

--------------------------------- [l]azy[g]it ----------------------------------

git.lazygit = function()
    vim.cmd('LazyGitCurrentFile')
end

-------------------------- configure [g]ithub [u]ser ---------------------------

git.configure_github_user = function()
    -- configure github user authentication
    vim.notify('Configuring GitHub User', vim.log.levels.INFO)
    vim.cmd('TermExec cmd="gh auth login"')
end

---------------------- configure [g]it[h]ub repositories -----------------------

git.configure_github_repos = function()
    -- check if user is cloning to local or creating remote repos
    vim.ui.select({
        { name = 'Clone',  desc = 'Clone existing GitHub repositories to project folder' },
        { name = 'Create', desc = 'Create GitHub repositories from project folder' }
    }, {
        prompt = 'Choose initialization strategy:',
        format_item = function(item)
            return item.desc
        end
    }, function(choice)
        if choice == nil then
            return true
            -- if user chose to clone, clone
        elseif choice.name == 'Clone' then
            git.github_clone_strategy()
            -- if user chose to create, create
        elseif choice.name == 'Create' then
            git.github_create_strategy()
        end
    end)
end

git.github_clone_strategy = function()
    -- cloning public repo
    vim.ui.input({
        prompt = 'Enter GitHub Name of Public Repository',
        default = 'resolution-public',
        relative = 'editor',
    }, function(input)
        if input ~= nil then
            local input_old = input
            -- cloning private repo
            vim.ui.input({
                prompt = 'Enter GitHub Name of Private Repository',
                default = 'resolution-private',
                relative = 'editor',
            }, function(input)
                if input ~= nil then
                    -- actual cloning steps
                    vim.notify('Cloning Public Directory...', vim.log.levels.INFO)
                    exec_in_dir(string.format('gh repo clone %s . --separate-git-dir=.gitpublic', input_old),
                        prefs.project_root_path)
                    vim.notify('Cloning Private Directory...', vim.log.levels.INFO)
                    exec_in_dir(string.format('gh repo clone %s . --separate-git-dir=.gitprivate', input),
                        prefs.project_root_path)
                end
            end)
        end
    end)
end

git.github_create_strategy = function()
    -- ensure standard repository exists
    vim.notify('Checking for Standard Repositories in Project Folder', vim.log.levels.INFO)
    git.configure_standard_repos(false)

    -- create public repository
    vim.notify('Creating Public GitHub Repository', vim.log.levels.INFO)
    core_utils.move_folder(
        prefs.project_root_path .. '/.gitpublic',
        prefs.project_root_path .. '/.git')
    exec_in_dir(
    'gh repo create "resolution-public" --public --description "Public repository generated by resolution." --disable-wiki --homepage "https://github.com/RobinTruax/resolution" --source .',
        prefs.project_root_path)
    core_utils.move_folder(
        prefs.project_root_path .. '/.git',
        prefs.project_root_path .. '/.gitpublic')

    -- create private repository
    vim.notify('Creating Private GitHub Repository', vim.log.levels.INFO)
    core_utils.move_folder(
        prefs.project_root_path .. '/.gitprivate',
        prefs.project_root_path .. '/.git')
    exec_in_dir(
    'gh repo create "resolution-private" --private --description "Private repository generated by resolution." --disable-wiki --homepage "https://github.com/RobinTruax/resolution" --source .',
        prefs.project_root_path)
    core_utils.move_folder(
        prefs.project_root_path .. '/.git',
        prefs.project_root_path .. '/.gitprivate')
end

---------------------------- [g]it [s]tandard repos ----------------------------

git.configure_standard_repos = function(notify)
    -- check if repositories exist in the project folder
    local check1 = exec_in_dir('git rev-parse --is-inside-work-tree', prefs.project_root_path)
    local check2 = exec_in_dir('git --git-dir=.gitpublic rev-parse --is-inside-work-tree ', prefs.project_root_path)
    local check3 = exec_in_dir('git --git-dir=.gitprivate rev-parse --is-inside-work-tree', prefs.project_root_path)
    if check1:sub(1, 4) == 'true' or check2:sub(1, 4) == 'true' or check3:sub(1, 4) == 'true' then
        if notify ~= false then
            vim.notify('Repositories in Project Folder Already Exist; Cancelling', vim.log.levels.WARNING)
        end
        return false
    end
    -- creating repositories
    vim.notify('Creating Standard Repositories in Project Folder', vim.log.levels.INFO)
    -- creating private repository
    exec_in_dir('git init .', prefs.project_root_path)
    core_utils.move_folder(
        prefs.project_root_path .. '/.git',
        prefs.project_root_path .. '/.gitprivate')
    vim.notify('Created Private Repository', vim.log.levels.INFO)
    -- creating public repository
    exec_in_dir('git init .', prefs.project_root_path)
    core_utils.move_folder(
        prefs.project_root_path .. '/.git',
        prefs.project_root_path .. '/.gitpublic')
    vim.notify('Created Public Repository', vim.log.levels.INFO)
    core_utils.copy_file(
        core_utils.config_path() .. '/lua/filesys/latexpygitignore',
        prefs.project_root_path .. '/.gitignore')
    vim.notify('Created .gitignore file for LaTeX and Python', vim.log.levels.INFO)
end

----------------------------- pull [g]it in [M]ath -----------------------------

git.pull_git_in_math = function()
    -- pull public
    vim.notify('Pulling Public Repository', vim.log.levels.OFF)
    exec_in_dir('git pull --git-dir=.gitpublic', prefs.project_root_path)
    -- pull private
    vim.notify('Pulling Private Repository', vim.log.levels.OFF)
    exec_in_dir('git pull --git-dir=.gitprivate', prefs.project_root_path)
end

------------------------- commit/push [g]it in [m]ath --------------------------

git.push_git_in_math = function()
    -- add, commit, and push private
    vim.notify('Adding, Committing, and Pushing Private Repository', vim.log.levels.OFF)
    exec_in_dir('git --git-dir=.gitprivate add -A', prefs.project_root_path)
    exec_in_dir('git --git-dir=.gitprivate commit -a -m "Update."', prefs.project_root_path)
    exec_in_dir('git --git-dir=.gitprivate push --set-upstream origin master', prefs.project_root_path)
    -- commit and push public
    vim.notify('Committing and Pushing Public Repository', vim.log.levels.OFF)
    exec_in_dir('git --git-dir=.gitpublic commit -a -m "Update."', prefs.project_root_path)
    exec_in_dir('git --git-dir=.gitpublic push --set-upstream origin master', prefs.project_root_path)
end

--------------------------------- [g]it [P]ull ---------------------------------

git.pull_git = function()
    -- pull local git
    vim.notify('Pulling', vim.log.levels.OFF)
    local directory = core_utils.current_directory()
    exec_in_dir('git pull', directory)
end

----------------------------- [g]it commit/[p]ush ------------------------------

git.push_git = function()
    -- add all, commit all, push with merge all
    vim.notify('Committing and Pushing', vim.log.levels.OFF)
    local directory = core_utils.current_directory()
    exec_in_dir('git add -A', directory)
    exec_in_dir('git commit -a -m "Updating."', directory)
    exec_in_dir('git push --set-upstream origin master', directory)
end

-- ------------------------- project from [g]ithub [R]epo -------------------------
--
-- git.github_to_project = function()
--     require('filesys.create_project')(nil, { github = true })
-- end
--
-- ------------------------- [g]ithub [r]epo from project -------------------------
--
-- git.project_to_github = function()
--     local project_path = core_utils.current_project_path()
--     if project_path == nil then
--         vim.notify('Not in Project Directory', vim.log.levels.ERROR)
--         return
--     end
--     -- initialize 
--     vim.notify('Initializing Git repository', vim.log.levels.OFF)
--     exec_in_dir('git init .', project_path)
--     -- add and commit
--     vim.notify('Adding files to Git repository', vim.log.levels.OFF)
--     exec_in_dir('git add -A', project_path)
--     exec_in_dir('git commit -a -m "Initial commit."', project_path)
--     -- create repo
--     local category = vim.fn.fnamemodify(project_path, ':p:h:h:t')
--     local project = vim.fn.fnamemodify(project_path, ':p:h:t')
--     local title = string.format('%s-%s', category, project)
--     vim.notify('Creating GitHub repository', vim.log.levels.OFF)
--     exec_in_dir(string.format('gh repo create %s --source . --private', title), project_path)
--     vim.notify('Pushing to GitHub repository', vim.log.levels.OFF)
--     -- push
--     exec_in_dir('git push --set-upstream origin master', project_path)
-- end

------------------------- [t]oggle file [g]it publicity --------------------------

git.toggle_file_publicity = function()
    vim.notify('Toggling file publicity', vim.log.levels.OFF)
    local project_path = core_utils.current_project_path()
    local file_path = core_utils.current_filepath()
    if project_path ~= nil then
        local check = exec_in_dir(string.format('git --git-dir=.gitpublic ls-files "%s"', file_path), prefs.project_root_path)
        if check == '' then
            vim.notify('Adding file to public repository', vim.log.levels.OFF)
            exec_in_dir(string.format('git --git-dir=.gitpublic add "%s"', file_path), prefs.project_root_path)
        else
            vim.notify('Removing file from public repository', vim.log.levels.OFF)
            exec_in_dir(string.format('git --git-dir=.gitpublic rm --cached "%s"', file_path), prefs.project_root_path)
        end
    else
        vim.notify('Not in project', vim.log.levels.ERROR)
    end
end

------------------------ [T]oggle project [g]it publicity ------------------------

git.toggle_project_publicity = function()
    vim.notify('Toggling project publicity', vim.log.levels.OFF)
    local project_path = core_utils.current_project_path()
    if project_path ~= nil then
        local check = exec_in_dir(string.format('git --git-dir=.gitpublic ls-files "%s*"', project_path), prefs.project_root_path)
        if check == '' then
            vim.notify('Adding project to public repository', vim.log.levels.OFF)
            exec_in_dir(string.format('git --git-dir=.gitpublic add "%s*"', project_path), prefs.project_root_path)
        else
            vim.notify('Removing project from public repository', vim.log.levels.OFF)
            exec_in_dir(string.format('git --git-dir=.gitpublic rm --cached "%s*"', project_path), prefs.project_root_path)
        end
    else
        vim.notify('Not in project', vim.log.levels.ERROR)
    end
end

--------------------------------------------------------------------------------

return git

--------------------------------------------------------------------------------
